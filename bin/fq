#!/usr/bin/env perl
use strict;
use File::Basename;
#use Data::Dumper;

my $quiet = 0;
my $EXE = basename($0);
sub msg { print STDERR "[$EXE] @_\n" unless $quiet; }
sub err { $quiet=0; msg("ERROR:", @_); exit(-1); }

my(@Options, $ref, $hist);
setOptions();

@ARGV or die "Please provide some FASTQ files!";
$hist and die "Sorry, --hist is no longer supported";

#min_len: 35; max_len: 151; avg_len: 147.63; 6 distinct quality values
#POS     #bases  %A      %C      %G      %T      %N      avgQ    errQ    %low    %high
#ALL     134985892       21.7    28.2    28.6    21.5    0.0     32.1    22.9    11.3 >
#1       914379  19.4    23.9    43.8    13.0    0.0     30.9    25.7    4.3     95.7
#2       914379  18.3    28.6    18.0    35.1    0.0     31.1    26.3    3.6     96.4
#....
#150     785526  22.8    26.1    31.3    19.8    0.0     27.3    19.8    23.8    76.2
#151     530460  31.4    0.0     44.7    23.9    0.0     23.9    17.9    38.3    61.7

my %stat;
my $cmd = "cat @ARGV | seqtk fqchk -q0 -";
msg("running command: $cmd");
open my $IN, '-|', $cmd or err("could not run command: $cmd");
while (<$IN>) {
  if (m/^min_len/) {
    s/\s//g;
    for my $pair (split m';') {
      my($k,$v) = split m':', $pair;
      $stat{$k} = $v if $v;
    }
  }
  elsif (m/^ALL/) {
    my @x = split ' ';
    $stat{total_bp} = $x[1];
    $stat{gee_cee} = $x[3] + $x[4];
    $stat{avg_qual} = $x[7];
    $stat{ambig_bp_pc} = $x[6];
  }
  elsif (m/^1\s+(\d+)\b/) {
    $stat{num_reads} = $1;
  }
}
msg("processed", $stat{num_reads}, "reads.");
#print Dumper(\%stat);

printf "Files\t@ARGV\n";
printf "Reads\t%d\n", $stat{num_reads};
printf "Yield\t%d\n", $stat{total_bp};
printf "GeeCee\t%.1f\n", $stat{gee_cee};
printf "MinLen\t%d\n", $stat{min_len};
printf "AvgLen\t%d\n", int($stat{avg_len}); # don't round up (compat)
printf "MaxLen\t%d\n", $stat{max_len};
#printf "ModeLen\t%d\n", $mode;
#printf "Phred\t%s\n", $offset;
printf "AvgQual\t%.1f\n", $stat{avg_qual};
#printf "AmbigBases\t%.3f\n", $stat{ambig_bp_pc};

if ($ref) {
  my $size = ($ref =~ m/^(\d+)$/ ? $1 : (-s $ref));
  msg("calculating depth, using size $size (via --ref $ref)");
  printf "Depth\t%dx\n", $stat{total_bp} / $size;
}

#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"quiet!",  VAR=>\$quiet, DEFAULT=>0, DESC=>"Quiet mode: no progress output"},
    {OPT=>"ref=s",   VAR=>\$ref, DEFAULT=>'',  DESC=>"Reference FASTA file OR size in bp"},
    {OPT=>"hist",    VAR=>\$hist, DEFAULT=>0,  DESC=>"Length histogram (NO LONGER SUPPORTED)"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  print "Usage: $EXE [options] <file.fq | file.fq.gz ...>\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
