/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

params {
    modules {
        'abricate_resistome' {
            args = "--db ncbi --minid 80 --mincov 80 "
            publish_files = [ 'tsv':'', 'yml': '']
            publish_by_meta = ['abricate', 'id']
            publish_dir = "."
        }
         'abricate_vf' {
            args = "--db vfdb --minid 80 --mincov 80 "
            publish_files = [ 'tsv':'', 'yml': '']
            publish_by_meta = ['virulence', 'id']
            publish_dir = "."
        }
        'abricate_vf' {
            args = "--db vfdb --minid 80 --mincov 80 "
            publish_files = [ 'tsv':'', 'yml': '']
            publish_by_meta = ['abricate_vf', 'id']
            publish_dir = "."
        }
        'abritamr' {
            args = ""
            publish_files = [ '_virulence.txt':'', '_resistome.txt':'', 'yml': '']
            publish_by_meta = ['abritamr', 'id']
            publish_dir = "."
        }
        'bakta' {
            args = "--min-contig-length 200"
            publish_files = [ 'gff3':'', 'json':'', 'tsv':'',  'gbff':'', 'embl':'', 'ffn':'', 'faa':'','yml': '']
            publish_by_meta = ['bakta', 'id']
            publish_dir = "."
        }
        'bbmap_bbduk' {
            args = "ktrim=r ordered minlen=51 minlenfraction=0.33 mink=11 tbo tpe rcomp=f k=23 ow=t hdist=1 hdist2=1 ftm=5 zl=4 ref=adapters,artifacts"
            args2 = "maq=5 trimq=10 qtrim=f ordered ow=t maxns=1 minlen=51 minlenfraction=0.33 k=25 hdist=1 zl=6 ref=adapters,artifacts,phix"
            args3 = "ordered ow=t k=20 hdist=1 zl=6 ref=adapters,artifacts,phix"
            publish_files   = ['fastq.gz':'', 'yml': '']
            publish_by_meta = ['bbmap_bbduk', 'id']
            publish_dir     = "qc"
        }
        
        'fastqc_raw' {
            args = "--quiet"
            publish_files   = ['zip':'', 'html': '', 'yml': '']
            publish_by_meta = ['raw', "id"]
            publish_dir = "fastqc"
        }
         'fastqc_qc' {
            args = "--quiet"
            publish_files   = ['zip':'', 'html': '', 'yml': '']
            publish_by_meta = ['qc', "id"]
            publish_dir = "fastqc"
        }
        'flye' {
            args = "--scaffold"
           // args2 = "minlength=200"
            publish_files = [ 'contigs.fasta':'', 'contig_info.txt':'', 'graph.gfa':'' , 'yml': '']
            publish_by_meta = ['flye', 'id']
            publish_dir = "assembly"
        }
        
        'kraken2' {
            args = ""
            publish_files = ['_kraken2.report.txt':'', '_species.txt':'', 'fastq.gz':'', 'yml': '' ]
            publish_by_meta = ['kraken2', 'id']
            publish_dir = "."
        }
        
        
        'medaka' {
            args = "-m r941_min_hac_g507"
            publish_by_meta = ['medaka', 'id']
            publish_dir = "assembly/polish"
        }

        'minimap_align_short' {
            args = "-ax sr"
            
            publish_files = false
            publish_by_meta = ['id', 'minimap_align_short']
            publish_dir = "assembly"
        }
        'minimap_align_long' {
            args = "-x ava-ont"
            publish_files = false
            publish_by_meta = ['id', 'minimap_align_long']
            publish_dir = "assembly"
        }
        'miniasm' {
            args = ""
            publish_files = [ '_assembly.fasta':'', 'yml': '' ]
            publish_by_meta = ['miniasm', 'id']
            publish_dir = "assembly"
        }
        'mlst' {
            args = "--csv --nopath"
            publish_files = [ 'csv':'', 'json':'', 'yml': '']
            publish_by_meta = ['mlst', 'id']
            publish_dir = "."
        }
        'mobsuite' {
            args = ""
            publish_files = [ '_contig_report.txt':'', '_mobtyper_results.txt':'', '-_plasmid.txt':'', 'yml': '' ]
            publish_by_meta = ['mobsuite', 'id']
            publish_dir = "."
        }
         'multiqc' {
            args = ""
        }
        'nanoplot' {
            args = "-c darkblue --tsv_stats --info_in_report --plots hex dot"
            publish_by_meta = ['nanoplot', 'id']
            publish_dir = "."
        }
        //do not have singularity, only local install
        'nextpolish' {
            args = ""
            publish_by_meta = ['nextpolish', 'id']
            publish_dir = "assembly/polish"
        }
        'pilon' {
            args = "--fix all --changes"
            publish_files = [ '_pilon.fasta':'' , 'yml': '']
            publish_by_meta = ['pilon', 'id']
            publish_dir = "assembly/polish"
        }
        'polca' {
            args = ""
            publish_files = [ '_polca.fasta':'', 'yml': '' ]
            publish_by_meta = ['polca', 'id']
            publish_dir = "assembly/polish"
        }
        'porechop' {
            args = ""
            publish_files = [ '_porechop.fastq':'', 'yml': '' ]
            publish_by_meta = ['porechop', 'id']
            publish_dir     = "."
        }
         
        'prokka' {
            args = "--mincontiglen 500 --notrna --fast --force"
            publish_by_meta = ['prokka', 'id']
            publish_dir = "."
        }
        'racon' {
            args = "-m 8 -x -6 -g -8 -w 500"
            publish_files = [ '_racon.fasta':'' , 'yml': '']
            publish_by_meta = ['racon', 'id']
            publish_dir = "assembly/polish"
        }
        'rgi' {
            args = "--clean --alignment_tool DIAMOND --input_type contig"
            publish_files = [ 'json':'' , 'txt':'','yml': '']
            publish_by_meta = ['rgi', 'id']
            publish_dir = "."
        }
        'rgi_heatmap' {
            args = ""
            publish_files = [ 'png':'','yml': '']
            publish_by_meta = ['rgi_heatmap', 'id']
            publish_dir = "."
        }
        'samtools_index' {
            args = ""
            publish_dir     = "."
        }
        'samtools_sort' {
            args = ""
            suffix = "_sort"
            publish_dir     = "."
        }

        'samtools_view' {
            args = " -F 0x4 -b"
            publish_dir     = "."
        }
        'seqtk_fqchk_longreads_raw' {
            args                = "long"
            suffix              = "raw" 
            publish_files   = ['seqstats.txt':'', 'yml': '']
            publish_dir     = "stats"
        }
        'seqtk_fqchk_longreads_qc' {
            args                = "long"
            suffix              = "qc" 
            publish_files   = ['seqstats.txt':'', 'yml': '']
            publish_dir     = "stats"
        }
        'seqtk_fqchk_shortreads_raw' {
            args                =""
            suffix              = "raw" 
            publish_files   = ['seqstats.txt':'', 'yml': '']
            publish_dir     = "stats"
        }
        'seqtk_fqchk_shortreads_qc' {
            args                =""
            suffix              = "qc" 
            publish_files   = ['seqstats.txt':'', 'yml': '']
            publish_dir     = "stats"
        }
        'skesa' {
            args = ""
             //contig min length
            //args2 = "minlength=200"
            publish_files   = ['_contigs.fasta':'', 'yml': '']
            publish_by_meta = ['skesa', 'id']
            publish_dir     = "assembly"
        }
        'spades' {
            //auto only works with uniform coverage model
            args = "--careful --only-assembler --cov-cutoff auto"
            publish_files   = ['fasta':'', 'gfa':'', 'log':'', 'yml': '']
            publish_by_meta = ['spades', 'id']
            publish_dir     = "assembly"
        }
        'spades_hybrid' {
            //auto only works with uniform coverage model
            args = "--careful --only-assembler --cov-cutoff auto"
            publish_files   = ['fasta':'', 'gfa':'', 'log':'', 'yml': '']
            publish_by_meta = ['spades_hybrid', 'id']
            publish_dir     = "assembly"
        }
        'srax' {
            args = "-s dblastx -a muscle -db basic -e 1e-05 -id 85 -c 60 "
            publish_files   = ['results':'', 'yml': '']
            publish_by_meta = ['srax', 'id']
            publish_dir     = "."
        }

        //assembly illumina or long reads
        'unicycler_short' {
            args = "--mode normal"
            
             //contig min length
            args2 = "minlength=200"
            args3 = "short"
            publish_files   = ['scaffolds':'', 'gfa':'', 'yml':'']
            publish_by_meta = ['unicycler_short', 'id']
            publish_dir = "assembly"
        }
        
        //assembly illumina or long reads
        'unicycler_long' {
            args = "--mode normal"
            publish_files   = ['scaffolds':'', 'gfa':'', 'yml':'']
            publish_by_meta = ['unicycler_long', 'id']
            publish_dir = "assembly"
        }
        //assembly illumina or long reads
        'unicycler_hybrid' {
            args = "--mode normal"
            publish_files   = ['scaffolds':'', 'gfa':'', 'yml':'']
            publish_by_meta = ['unicycler_hybrid', 'id']
            publish_dir = "assembly"
        }
        
        
        
        
    }
}
